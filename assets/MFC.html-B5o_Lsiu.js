import{_ as n,c as s,d as i,o as l}from"./app-ZTDKGR0h.js";const e="/Yanran_blog/assets/MFC-ClxKNo7p.png",r="/Yanran_blog/assets/MFC-2-xjpyZsgi.png",p="/Yanran_blog/assets/MFC-4-DVnIFH5H.png",d="/Yanran_blog/assets/MFC-3-h_vfhjxm.png",c="/Yanran_blog/assets/MFC-5-D7nkSJej.png",t="/Yanran_blog/assets/MFC-1-B41mypRk.png",o={};function u(h,a){return l(),s("div",null,a[0]||(a[0]=[i('<h1 id="mfc" tabindex="-1"><a class="header-anchor" href="#mfc"><span>MFC</span></a></h1><h2 id="_1-windows消息机制" tabindex="-1"><a class="header-anchor" href="#_1-windows消息机制"><span>1. Windows消息机制</span></a></h2><ul><li>windows识别的主函数入口是WinMain函数</li><li>消息机制图</li></ul><p><img src="'+e+`" alt="600"></p><ul><li>Win32程序需要加头文件<code>#include&lt;windows.h&gt;</code></li><li>主要步骤是：</li></ul><ol><li>WinMain函数的定义</li><li>创建窗口</li><li>消息循环</li><li>编写窗口过程函数</li></ol><div class="language-C line-numbers-mode" data-highlighter="prismjs" data-ext="C"><pre><code class="language-C"><span class="line">//1.设计窗口</span>
<span class="line">//2.注册窗口(类)</span>
<span class="line">//3.创建窗口</span>
<span class="line">//4.显示和更新</span>
<span class="line">//5.通过循环取消息</span>
<span class="line">//6.处理消息（窗口过程）</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-注意事项" tabindex="-1"><a class="header-anchor" href="#_2-注意事项"><span>2. 注意事项</span></a></h2><h3 id="_2-1-多字节与宽字节" tabindex="-1"><a class="header-anchor" href="#_2-1-多字节与宽字节"><span>2.1 多字节与宽字节</span></a></h3><ul><li><p>一个字符对应一个字节-&gt;多字节 ASCII</p></li><li><p>一个字符对应多个字节-&gt;宽字节 Unicode</p></li><li><p>多字节转为宽字节：L“aaa”</p></li><li><p>自动实现自适应字节转换：TEXT(“aaa”)， 类似的，TCHAR也能实现自适应编码的转换</p></li><li><p>统计字符串（多字节）长度：</p></li></ul><div class="language-C line-numbers-mode" data-highlighter="prismjs" data-ext="C"><pre><code class="language-C"><span class="line">char *p = &quot;aaa&quot;;</span>
<span class="line">int num = strlen(p);</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>统计字符串（宽字节）长度：</li></ul><div class="language-C line-numbers-mode" data-highlighter="prismjs" data-ext="C"><pre><code class="language-C"><span class="line">char *p = L&quot;aaa&quot;;</span>
<span class="line">int num = wcslen(p);</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>char* 与CString的转换</li></ul><div class="language-C line-numbers-mode" data-highlighter="prismjs" data-ext="C"><pre><code class="language-C"><span class="line">//char* -&gt; CString</span>
<span class="line">char * p = &quot;aaa&quot;;</span>
<span class="line">CString str = CString(p);</span>
<span class="line"></span>
<span class="line">//CString-&gt; char*</span>
<span class="line">CStringA tmp = str;</span>
<span class="line">char *p = tmp.GetBuffer();</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>C++中的String与MFC中的CString不能直接转换，只能通过char* 来过度转换</li></ul><p><img src="`+r+'" alt="800"></p><p><img src="'+p+'" alt="800"></p><p><img src="'+d+'" alt="800"></p><ul><li>用基类的OnOK()函数，执行基类中的EndDialog(IDOK)函数，作用是关闭对话框，并把IDOK作为对话框的返回值，返回给调用对话（DoModal）的地方。</li></ul><h2 id="_3-mfc" tabindex="-1"><a class="header-anchor" href="#_3-mfc"><span>3. MFC</span></a></h2><h3 id="_3-1-基础知识" tabindex="-1"><a class="header-anchor" href="#_3-1-基础知识"><span>3.1 基础知识</span></a></h3><ul><li>文档介绍：MFC基础教程</li><li>微软基础类库：Microsoft Foundation Classes</li><li>编写MFC程序需要包含<code>#include&lt;afxwin.h&gt;</code></li><li>类库中文手册：VC++之MFC类库中文手册</li></ul><h3 id="_3-2-mfc窗口创建" tabindex="-1"><a class="header-anchor" href="#_3-2-mfc窗口创建"><span>3.2 MFC窗口创建</span></a></h3><p><img src="'+c+'" alt="600"></p><h3 id="_3-3-消息映射机制" tabindex="-1"><a class="header-anchor" href="#_3-3-消息映射机制"><span>3.3 消息映射机制</span></a></h3><ul><li>消息映射是一个将消息和成员函数相互关联的表。</li><li>框架窗口接收到一个鼠标左击消息，MFC将搜索这个窗口的消息映射，如果存在一个处理<code>WM_LBUTTONDOWN</code>的处理程序，那么就调用<code>OnLButtonDown</code>。</li><li>将消息映射添加到一个类中所做的工作：</li></ul><ol><li>在所操作的类中声明消息映射宏。</li><li>通过放置标识消息的宏来执行消息映射，相应的类将在对BEGIN_MESSAGE_MAP和END_MESSAGE_MAP的调用之间处理消息。</li><li>对应消息处理函数分别在类中声明，类外定义：</li></ol><p><img src="'+t+'" alt="600"></p><h3 id="_3-4-向导式mfc" tabindex="-1"><a class="header-anchor" href="#_3-4-向导式mfc"><span>3.4 向导式MFC</span></a></h3><p>生成的MFC项目共有4个类：</p><ol><li>App(一般不用写)</li><li>View(展示)</li><li>Frame(逻辑)</li><li>Doc(数据文档)</li></ol><ul><li><p>数据的存储和加载由文档类来完成，数据的显示和修改则由视类来完成。</p></li><li><p>通过修改传递给PreCreateWindow的结构体类型参数CREATESTRUCT，应用程序可以更改用于创建窗口的属性。在产生窗口之前让程序员有机会修改窗口的外观。</p></li><li><p>OnCreate是一个消息响应函数，是响应WM_CREATE消息的一个函数，而WM_CREATE消息是由Create函数调用的。一个窗口创建（Create）之后，会向操作系统发送WM_CREATE消息，OnCreate()函数主要是用来响应此消息的。</p></li><li><p>MFC中后缀名为Ex的函数都是扩展函数。</p></li><li><p>在MFC中，以Afx为前缀的函数都是全局函数，可以在程序的任何地方调用它们。</p></li></ul>',33)]))}const g=n(o,[["render",u]]),C=JSON.parse('{"path":"/guide/knowledge/MFC.html","title":"MFC","lang":"zh-CN","frontmatter":{},"git":{},"filePathRelative":"guide/knowledge/MFC.md"}');export{g as comp,C as data};
